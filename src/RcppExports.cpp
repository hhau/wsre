// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// weighting_function
NumericVector weighting_function(NumericVector x, double wf_mean, double wf_sd, double wf_exp);
RcppExport SEXP _wsre_weighting_function(SEXP xSEXP, SEXP wf_meanSEXP, SEXP wf_sdSEXP, SEXP wf_expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type wf_mean(wf_meanSEXP);
    Rcpp::traits::input_parameter< double >::type wf_sd(wf_sdSEXP);
    Rcpp::traits::input_parameter< double >::type wf_exp(wf_expSEXP);
    rcpp_result_gen = Rcpp::wrap(weighting_function(x, wf_mean, wf_sd, wf_exp));
    return rcpp_result_gen;
END_RCPP
}
// gauss_kde
NumericVector gauss_kde(NumericVector x, NumericVector x_samples, double bandwidth);
RcppExport SEXP _wsre_gauss_kde(SEXP xSEXP, SEXP x_samplesSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_samples(x_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_kde(x, x_samples, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// weight_gauss_kde_jones
NumericVector weight_gauss_kde_jones(NumericVector x, NumericVector weighted_samples, double wf_mean, double wf_sd, double wf_exp, double bandwidth);
RcppExport SEXP _wsre_weight_gauss_kde_jones(SEXP xSEXP, SEXP weighted_samplesSEXP, SEXP wf_meanSEXP, SEXP wf_sdSEXP, SEXP wf_expSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weighted_samples(weighted_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type wf_mean(wf_meanSEXP);
    Rcpp::traits::input_parameter< double >::type wf_sd(wf_sdSEXP);
    Rcpp::traits::input_parameter< double >::type wf_exp(wf_expSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_gauss_kde_jones(x, weighted_samples, wf_mean, wf_sd, wf_exp, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// weight_gauss_kde_bhatt
NumericVector weight_gauss_kde_bhatt(NumericVector x, NumericVector weighted_samples, double wf_mean, double wf_sd, double wf_exp, double bandwidth);
RcppExport SEXP _wsre_weight_gauss_kde_bhatt(SEXP xSEXP, SEXP weighted_samplesSEXP, SEXP wf_meanSEXP, SEXP wf_sdSEXP, SEXP wf_expSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weighted_samples(weighted_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type wf_mean(wf_meanSEXP);
    Rcpp::traits::input_parameter< double >::type wf_sd(wf_sdSEXP);
    Rcpp::traits::input_parameter< double >::type wf_exp(wf_expSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_gauss_kde_bhatt(x, weighted_samples, wf_mean, wf_sd, wf_exp, bandwidth));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4binom_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4normal_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_wsre_weighting_function", (DL_FUNC) &_wsre_weighting_function, 4},
    {"_wsre_gauss_kde", (DL_FUNC) &_wsre_gauss_kde, 3},
    {"_wsre_weight_gauss_kde_jones", (DL_FUNC) &_wsre_weight_gauss_kde_jones, 6},
    {"_wsre_weight_gauss_kde_bhatt", (DL_FUNC) &_wsre_weight_gauss_kde_bhatt, 6},
    {"_rcpp_module_boot_stan_fit4binom_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4binom_mod, 0},
    {"_rcpp_module_boot_stan_fit4normal_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4normal_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_wsre(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
