// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// kernel_func_nd
double kernel_func_nd(NumericVector x_val, NumericVector x_sample, NumericVector bw_vec);
RcppExport SEXP _wsre_kernel_func_nd(SEXP x_valSEXP, SEXP x_sampleSEXP, SEXP bw_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_sample(x_sampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bw_vec(bw_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_func_nd(x_val, x_sample, bw_vec));
    return rcpp_result_gen;
END_RCPP
}
// kde_func_nd
double kde_func_nd(NumericVector x_val, NumericMatrix x_sample_mat, NumericVector bw_vec);
RcppExport SEXP _wsre_kde_func_nd(SEXP x_valSEXP, SEXP x_sample_matSEXP, SEXP bw_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_sample_mat(x_sample_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bw_vec(bw_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(kde_func_nd(x_val, x_sample_mat, bw_vec));
    return rcpp_result_gen;
END_RCPP
}
// pointwise_weighting_function_nd
double pointwise_weighting_function_nd(NumericVector x_sample, NumericVector wf_mean, NumericVector wf_sd, double wf_exponent, bool log_scale);
RcppExport SEXP _wsre_pointwise_weighting_function_nd(SEXP x_sampleSEXP, SEXP wf_meanSEXP, SEXP wf_sdSEXP, SEXP wf_exponentSEXP, SEXP log_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_sample(x_sampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wf_mean(wf_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wf_sd(wf_sdSEXP);
    Rcpp::traits::input_parameter< double >::type wf_exponent(wf_exponentSEXP);
    Rcpp::traits::input_parameter< bool >::type log_scale(log_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(pointwise_weighting_function_nd(x_sample, wf_mean, wf_sd, wf_exponent, log_scale));
    return rcpp_result_gen;
END_RCPP
}
// weight_gauss_kde_jones_nd
double weight_gauss_kde_jones_nd(NumericVector x_val, NumericMatrix weighted_samples, NumericVector wf_mean, NumericVector wf_sd, double wf_exponent, NumericVector bw_vec);
RcppExport SEXP _wsre_weight_gauss_kde_jones_nd(SEXP x_valSEXP, SEXP weighted_samplesSEXP, SEXP wf_meanSEXP, SEXP wf_sdSEXP, SEXP wf_exponentSEXP, SEXP bw_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type weighted_samples(weighted_samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wf_mean(wf_meanSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wf_sd(wf_sdSEXP);
    Rcpp::traits::input_parameter< double >::type wf_exponent(wf_exponentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bw_vec(bw_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_gauss_kde_jones_nd(x_val, weighted_samples, wf_mean, wf_sd, wf_exponent, bw_vec));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4binom_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4normal_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_wsre_kernel_func_nd", (DL_FUNC) &_wsre_kernel_func_nd, 3},
    {"_wsre_kde_func_nd", (DL_FUNC) &_wsre_kde_func_nd, 3},
    {"_wsre_pointwise_weighting_function_nd", (DL_FUNC) &_wsre_pointwise_weighting_function_nd, 5},
    {"_wsre_weight_gauss_kde_jones_nd", (DL_FUNC) &_wsre_weight_gauss_kde_jones_nd, 6},
    {"_rcpp_module_boot_stan_fit4binom_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4binom_mod, 0},
    {"_rcpp_module_boot_stan_fit4normal_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4normal_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_wsre(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
