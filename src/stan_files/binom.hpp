#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_binom_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_binom");
    reader.add_event(38, 36, "end", "model_binom");
    return reader;
}

class model_binom : public prob_grad {
private:
    double wf_mean;
    double wf_sd;
    double wf_exponent;
    int target_dimension;
public:
    model_binom(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_binom(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_binom_namespace::model_binom";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "wf_mean", "double", context__.to_vec());
            wf_mean = double(0);
            vals_r__ = context__.vals_r("wf_mean");
            pos__ = 0;
            wf_mean = vals_r__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "wf_sd", "double", context__.to_vec());
            wf_sd = double(0);
            vals_r__ = context__.vals_r("wf_sd");
            pos__ = 0;
            wf_sd = vals_r__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "wf_exponent", "double", context__.to_vec());
            wf_exponent = double(0);
            vals_r__ = context__.vals_r("wf_exponent");
            pos__ = 0;
            wf_exponent = vals_r__[pos__++];
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "target_dimension", "int", context__.to_vec());
            target_dimension = int(0);
            vals_i__ = context__.vals_i("target_dimension");
            pos__ = 0;
            target_dimension = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"wf_sd",wf_sd,0);
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"wf_exponent",wf_exponent,0);
            current_statement_begin__ = 11;
            check_greater_or_equal(function__,"target_dimension",target_dimension,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 15;
            ++num_params_r__;
            current_statement_begin__ = 16;
            ++num_params_r__;
            current_statement_begin__ = 19;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_binom() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("P_x")))
            throw std::runtime_error("variable P_x missing");
        vals_r__ = context__.vals_r("P_x");
        pos__ = 0U;
        context__.validate_dims("initialization", "P_x", "double", context__.to_vec());
        double P_x(0);
        P_x = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,1,P_x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable P_x: ") + e.what());
        }

        if (!(context__.contains_r("N_x")))
            throw std::runtime_error("variable N_x missing");
        vals_r__ = context__.vals_r("N_x");
        pos__ = 0U;
        context__.validate_dims("initialization", "N_x", "double", context__.to_vec());
        double N_x(0);
        N_x = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,N_x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable N_x: ") + e.what());
        }

        if (!(context__.contains_r("x")))
            throw std::runtime_error("variable x missing");
        vals_r__ = context__.vals_r("x");
        pos__ = 0U;
        context__.validate_dims("initialization", "x", "double", context__.to_vec());
        double x(0);
        x = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,N_x,x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ P_x;
            (void) P_x;  // dummy to suppress unused var warning
            if (jacobian__)
                P_x = in__.scalar_lub_constrain(0,1,lp__);
            else
                P_x = in__.scalar_lub_constrain(0,1);

            local_scalar_t__ N_x;
            (void) N_x;  // dummy to suppress unused var warning
            if (jacobian__)
                N_x = in__.scalar_lb_constrain(0,lp__);
            else
                N_x = in__.scalar_lb_constrain(0);

            local_scalar_t__ x;
            (void) x;  // dummy to suppress unused var warning
            if (jacobian__)
                x = in__.scalar_lub_constrain(0,N_x,lp__);
            else
                x = in__.scalar_lub_constrain(0,N_x);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 24;
            lp_accum__.add(beta_log<propto__>(P_x, 864.0, 648.0));
            current_statement_begin__ = 25;
            lp_accum__.add(lognormal_log<propto__>(N_x, 4.9299999999999997, 0.012));
            current_statement_begin__ = 28;
            lp_accum__.add((((stan::math::lgamma((N_x - 1)) - (stan::math::lgamma((x - 1)) + stan::math::lgamma(((N_x - x) - 1)))) + multiply_log(x,P_x)) + ((N_x - x) * log1m(P_x))));
            current_statement_begin__ = 35;
            lp_accum__.add((wf_exponent * normal_log(x,wf_mean,wf_sd)));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("P_x");
        names__.push_back("N_x");
        names__.push_back("x");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_binom_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double P_x = in__.scalar_lub_constrain(0,1);
        double N_x = in__.scalar_lb_constrain(0);
        double x = in__.scalar_lub_constrain(0,N_x);
        vars__.push_back(P_x);
        vars__.push_back(N_x);
        vars__.push_back(x);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_binom";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_x";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_x";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "x";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "P_x";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_x";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "x";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_binom_namespace::model_binom stan_model;


#endif