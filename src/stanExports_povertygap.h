// Generated by rstantools.  Do not edit by hand.

/*
    wsre is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    wsre is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with wsre.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_povertygap_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_povertygap");
    reader.add_event(102, 100, "end", "model_povertygap");
    return reader;
}
#include <stan_meta_header.hpp>
class model_povertygap
  : public stan::model::model_base_crtp<model_povertygap> {
private:
        int N;
        vector_d Y;
        int K;
        matrix_d X;
        int N_1;
        int M_1;
        std::vector<int> J_1;
        vector_d Z_1_1;
        int prior_only;
        vector_d obs_per_group;
        double log1p_poverty_threshold;
        int target_dimension;
        std::vector<double> wf_mean;
        std::vector<double> wf_sd;
        double wf_exponent;
        int Kc;
        matrix_d Xc;
        vector_d means_X;
public:
    model_povertygap(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_povertygap(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_povertygap_namespace::model_povertygap";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 5;
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(N));
            Y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                Y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "N_1", "int", context__.to_vec());
            N_1 = int(0);
            vals_i__ = context__.vals_i("N_1");
            pos__ = 0;
            N_1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_1", N_1, 1);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "M_1", "int", context__.to_vec());
            M_1 = int(0);
            vals_i__ = context__.vals_i("M_1");
            pos__ = 0;
            M_1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_1", M_1, 1);
            current_statement_begin__ = 11;
            validate_non_negative_index("J_1", "N", N);
            context__.validate_dims("data initialization", "J_1", "int", context__.to_vec(N));
            J_1 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("J_1");
            pos__ = 0;
            size_t J_1_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < J_1_k_0_max__; ++k_0__) {
                J_1[k_0__] = vals_i__[pos__++];
            }
            size_t J_1_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < J_1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "J_1[i_0__]", J_1[i_0__], 1);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("Z_1_1", "N", N);
            context__.validate_dims("data initialization", "Z_1_1", "vector_d", context__.to_vec(N));
            Z_1_1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("Z_1_1");
            pos__ = 0;
            size_t Z_1_1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Z_1_1_j_1_max__; ++j_1__) {
                Z_1_1(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "prior_only", "int", context__.to_vec());
            prior_only = int(0);
            vals_i__ = context__.vals_i("prior_only");
            pos__ = 0;
            prior_only = vals_i__[pos__++];
            current_statement_begin__ = 18;
            validate_non_negative_index("obs_per_group", "N_1", N_1);
            context__.validate_dims("data initialization", "obs_per_group", "vector_d", context__.to_vec(N_1));
            obs_per_group = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_1);
            vals_r__ = context__.vals_r("obs_per_group");
            pos__ = 0;
            size_t obs_per_group_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < obs_per_group_j_1_max__; ++j_1__) {
                obs_per_group(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "log1p_poverty_threshold", "double", context__.to_vec());
            log1p_poverty_threshold = double(0);
            vals_r__ = context__.vals_r("log1p_poverty_threshold");
            pos__ = 0;
            log1p_poverty_threshold = vals_r__[pos__++];
            check_greater_or_equal(function__, "log1p_poverty_threshold", log1p_poverty_threshold, 0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "target_dimension", "int", context__.to_vec());
            target_dimension = int(0);
            vals_i__ = context__.vals_i("target_dimension");
            pos__ = 0;
            target_dimension = vals_i__[pos__++];
            check_greater_or_equal(function__, "target_dimension", target_dimension, 0);
            current_statement_begin__ = 23;
            validate_non_negative_index("wf_mean", "target_dimension", target_dimension);
            context__.validate_dims("data initialization", "wf_mean", "double", context__.to_vec(target_dimension));
            wf_mean = std::vector<double>(target_dimension, double(0));
            vals_r__ = context__.vals_r("wf_mean");
            pos__ = 0;
            size_t wf_mean_k_0_max__ = target_dimension;
            for (size_t k_0__ = 0; k_0__ < wf_mean_k_0_max__; ++k_0__) {
                wf_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("wf_sd", "target_dimension", target_dimension);
            context__.validate_dims("data initialization", "wf_sd", "double", context__.to_vec(target_dimension));
            wf_sd = std::vector<double>(target_dimension, double(0));
            vals_r__ = context__.vals_r("wf_sd");
            pos__ = 0;
            size_t wf_sd_k_0_max__ = target_dimension;
            for (size_t k_0__ = 0; k_0__ < wf_sd_k_0_max__; ++k_0__) {
                wf_sd[k_0__] = vals_r__[pos__++];
            }
            size_t wf_sd_i_0_max__ = target_dimension;
            for (size_t i_0__ = 0; i_0__ < wf_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "wf_sd[i_0__]", wf_sd[i_0__], 0);
            }
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "wf_exponent", "double", context__.to_vec());
            wf_exponent = double(0);
            vals_r__ = context__.vals_r("wf_exponent");
            pos__ = 0;
            wf_exponent = vals_r__[pos__++];
            check_greater_or_equal(function__, "wf_exponent", wf_exponent, 0);
            // initialize transformed data variables
            current_statement_begin__ = 29;
            Kc = int(0);
            stan::math::fill(Kc, std::numeric_limits<int>::min());
            stan::math::assign(Kc,(K - 1));
            current_statement_begin__ = 30;
            validate_non_negative_index("Xc", "N", N);
            validate_non_negative_index("Xc", "Kc", Kc);
            Xc = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, Kc);
            stan::math::fill(Xc, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("means_X", "Kc", Kc);
            means_X = Eigen::Matrix<double, Eigen::Dynamic, 1>(Kc);
            stan::math::fill(means_X, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 32;
            for (int i = 2; i <= K; ++i) {
                current_statement_begin__ = 33;
                stan::model::assign(means_X, 
                            stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X")), 
                            "assigning variable means_X");
                current_statement_begin__ = 34;
                stan::model::assign(Xc, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list())), 
                            subtract(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"), get_base1(means_X, (i - 1), "means_X", 1)), 
                            "assigning variable Xc");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 39;
            validate_non_negative_index("b", "Kc", Kc);
            num_params_r__ += Kc;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            validate_non_negative_index("sd_1", "M_1", M_1);
            num_params_r__ += M_1;
            current_statement_begin__ = 43;
            validate_non_negative_index("z_1", "N_1", N_1);
            validate_non_negative_index("z_1", "M_1", M_1);
            num_params_r__ += (N_1 * M_1);
            current_statement_begin__ = 45;
            validate_non_negative_index("latent_std_normal", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_povertygap() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 39;
        if (!(context__.contains_r("b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        validate_non_negative_index("b", "Kc", Kc);
        context__.validate_dims("parameter initialization", "b", "vector_d", context__.to_vec(Kc));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b(Kc);
        size_t b_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("Intercept")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Intercept missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Intercept");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Intercept", "double", context__.to_vec());
        double Intercept(0);
        Intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(Intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Intercept: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("sd_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_1");
        pos__ = 0U;
        validate_non_negative_index("sd_1", "M_1", M_1);
        context__.validate_dims("parameter initialization", "sd_1", "vector_d", context__.to_vec(M_1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_1(M_1);
        size_t sd_1_j_1_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < sd_1_j_1_max__; ++j_1__) {
            sd_1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sd_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("z_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_1");
        pos__ = 0U;
        validate_non_negative_index("z_1", "N_1", N_1);
        validate_non_negative_index("z_1", "M_1", M_1);
        context__.validate_dims("parameter initialization", "z_1", "vector_d", context__.to_vec(M_1,N_1));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_1(M_1, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_1));
        size_t z_1_j_1_max__ = N_1;
        size_t z_1_k_0_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_1_k_0_max__; ++k_0__) {
                z_1[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t z_1_i_0_max__ = M_1;
        for (size_t i_0__ = 0; i_0__ < z_1_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(z_1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("latent_std_normal")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable latent_std_normal missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("latent_std_normal");
        pos__ = 0U;
        validate_non_negative_index("latent_std_normal", "N", N);
        context__.validate_dims("parameter initialization", "latent_std_normal", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> latent_std_normal(N);
        size_t latent_std_normal_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < latent_std_normal_j_1_max__; ++j_1__) {
            latent_std_normal(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(latent_std_normal);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable latent_std_normal: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 39;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b;
            (void) b;  // dummy to suppress unused var warning
            if (jacobian__)
                b = in__.vector_constrain(Kc, lp__);
            else
                b = in__.vector_constrain(Kc);
            current_statement_begin__ = 40;
            local_scalar_t__ Intercept;
            (void) Intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                Intercept = in__.scalar_constrain(lp__);
            else
                Intercept = in__.scalar_constrain();
            current_statement_begin__ = 41;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sd_1;
            (void) sd_1;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_1 = in__.vector_lb_constrain(0, M_1, lp__);
            else
                sd_1 = in__.vector_lb_constrain(0, M_1);
            current_statement_begin__ = 43;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > z_1;
            size_t z_1_d_0_max__ = M_1;
            z_1.reserve(z_1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z_1.push_back(in__.vector_constrain(N_1, lp__));
                else
                    z_1.push_back(in__.vector_constrain(N_1));
            }
            current_statement_begin__ = 45;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> latent_std_normal;
            (void) latent_std_normal;  // dummy to suppress unused var warning
            if (jacobian__)
                latent_std_normal = in__.vector_constrain(N, lp__);
            else
                latent_std_normal = in__.vector_constrain(N);
            // transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,add(Intercept, multiply(Xc, b)));
            current_statement_begin__ = 52;
            validate_non_negative_index("r_1_1", "N_1", N_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r_1_1(N_1);
            stan::math::initialize(r_1_1, DUMMY_VAR__);
            stan::math::fill(r_1_1, DUMMY_VAR__);
            stan::math::assign(r_1_1,multiply(get_base1(sd_1, 1, "sd_1", 1), get_base1(z_1, 1, "z_1", 1)));
            current_statement_begin__ = 54;
            local_scalar_t__ b_Intercept;
            (void) b_Intercept;  // dummy to suppress unused var warning
            stan::math::initialize(b_Intercept, DUMMY_VAR__);
            stan::math::fill(b_Intercept, DUMMY_VAR__);
            stan::math::assign(b_Intercept,(Intercept - dot_product(means_X, b)));
            current_statement_begin__ = 56;
            validate_non_negative_index("phi_area_poverty_gap", "N_1", N_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi_area_poverty_gap(N_1);
            stan::math::initialize(phi_area_poverty_gap, DUMMY_VAR__);
            stan::math::fill(phi_area_poverty_gap, DUMMY_VAR__);
            stan::math::assign(phi_area_poverty_gap,rep_vector(0.0, N_1));
            current_statement_begin__ = 57;
            validate_non_negative_index("x", "target_dimension", target_dimension);
            std::vector<local_scalar_t__> x(target_dimension, local_scalar_t__(0));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("post_pred_y", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> post_pred_y(N);
            stan::math::initialize(post_pred_y, DUMMY_VAR__);
            stan::math::fill(post_pred_y, DUMMY_VAR__);
            stan::math::assign(post_pred_y,add(mu, multiply(sigma, latent_std_normal)));
            // transformed parameters block statements
            current_statement_begin__ = 60;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 62;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "mu") + (get_base1(r_1_1, get_base1(J_1, n, "J_1", 1), "r_1_1", 1) * get_base1(Z_1_1, n, "Z_1_1", 1))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 65;
            for (int ii = 1; ii <= N; ++ii) {
                current_statement_begin__ = 66;
                stan::model::assign(phi_area_poverty_gap, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(J_1, ii, "J_1", 1)), stan::model::nil_index_list()), 
                            (stan::model::rvalue(phi_area_poverty_gap, stan::model::cons_list(stan::model::index_uni(get_base1(J_1, ii, "J_1", 1)), stan::model::nil_index_list()), "phi_area_poverty_gap") + (((log1p_poverty_threshold - get_base1(post_pred_y, ii, "post_pred_y", 1)) / log1p_poverty_threshold) * logical_lt(get_base1(post_pred_y, ii, "post_pred_y", 1), log1p_poverty_threshold))), 
                            "assigning variable phi_area_poverty_gap");
            }
            current_statement_begin__ = 71;
            stan::math::assign(phi_area_poverty_gap, elt_divide(phi_area_poverty_gap, obs_per_group));
            current_statement_begin__ = 72;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (sum(elt_multiply(phi_area_poverty_gap, obs_per_group)) / N), 
                        "assigning variable x");
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 52;
            size_t r_1_1_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < r_1_1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r_1_1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r_1_1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r_1_1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 54;
            if (stan::math::is_uninitialized(b_Intercept)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: b_Intercept";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b_Intercept: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 56;
            size_t phi_area_poverty_gap_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < phi_area_poverty_gap_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(phi_area_poverty_gap(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: phi_area_poverty_gap" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi_area_poverty_gap: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 57;
            size_t x_k_0_max__ = target_dimension;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(x[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 58;
            size_t post_pred_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < post_pred_y_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(post_pred_y(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: post_pred_y" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable post_pred_y: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log(b, 0, 1.0));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log(Intercept, 6, 1));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log(sigma, 0, 0.25));
            current_statement_begin__ = 80;
            lp_accum__.add(inv_gamma_log(sd_1, (8.918 * 2), 8.644));
            current_statement_begin__ = 81;
            lp_accum__.add(normal_log(get_base1(z_1, 1, "z_1", 1), 0, 0.5));
            current_statement_begin__ = 84;
            lp_accum__.add(std_normal_log(latent_std_normal));
            current_statement_begin__ = 87;
            if (as_bool(logical_neq(wf_exponent, 0))) {
                current_statement_begin__ = 88;
                lp_accum__.add((wf_exponent * normal_log(x, wf_mean, wf_sd)));
            }
            current_statement_begin__ = 91;
            if (as_bool(logical_negation(prior_only))) {
                current_statement_begin__ = 92;
                lp_accum__.add(normal_log(Y, mu, sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("Intercept");
        names__.push_back("sigma");
        names__.push_back("sd_1");
        names__.push_back("z_1");
        names__.push_back("latent_std_normal");
        names__.push_back("mu");
        names__.push_back("r_1_1");
        names__.push_back("b_Intercept");
        names__.push_back("phi_area_poverty_gap");
        names__.push_back("x");
        names__.push_back("post_pred_y");
        names__.push_back("predictive_y");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Kc);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_1);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(target_dimension);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_povertygap_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> b = in__.vector_constrain(Kc);
        size_t b_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            vars__.push_back(b(j_1__));
        }
        double Intercept = in__.scalar_constrain();
        vars__.push_back(Intercept);
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_1 = in__.vector_lb_constrain(0, M_1);
        size_t sd_1_j_1_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < sd_1_j_1_max__; ++j_1__) {
            vars__.push_back(sd_1(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > z_1;
        size_t z_1_d_0_max__ = M_1;
        z_1.reserve(z_1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_1_d_0_max__; ++d_0__) {
            z_1.push_back(in__.vector_constrain(N_1));
        }
        size_t z_1_j_1_max__ = N_1;
        size_t z_1_k_0_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_1_k_0_max__; ++k_0__) {
                vars__.push_back(z_1[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> latent_std_normal = in__.vector_constrain(N);
        size_t latent_std_normal_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < latent_std_normal_j_1_max__; ++j_1__) {
            vars__.push_back(latent_std_normal(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,add(Intercept, multiply(Xc, b)));
            current_statement_begin__ = 52;
            validate_non_negative_index("r_1_1", "N_1", N_1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r_1_1(N_1);
            stan::math::initialize(r_1_1, DUMMY_VAR__);
            stan::math::fill(r_1_1, DUMMY_VAR__);
            stan::math::assign(r_1_1,multiply(get_base1(sd_1, 1, "sd_1", 1), get_base1(z_1, 1, "z_1", 1)));
            current_statement_begin__ = 54;
            double b_Intercept;
            (void) b_Intercept;  // dummy to suppress unused var warning
            stan::math::initialize(b_Intercept, DUMMY_VAR__);
            stan::math::fill(b_Intercept, DUMMY_VAR__);
            stan::math::assign(b_Intercept,(Intercept - dot_product(means_X, b)));
            current_statement_begin__ = 56;
            validate_non_negative_index("phi_area_poverty_gap", "N_1", N_1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phi_area_poverty_gap(N_1);
            stan::math::initialize(phi_area_poverty_gap, DUMMY_VAR__);
            stan::math::fill(phi_area_poverty_gap, DUMMY_VAR__);
            stan::math::assign(phi_area_poverty_gap,rep_vector(0.0, N_1));
            current_statement_begin__ = 57;
            validate_non_negative_index("x", "target_dimension", target_dimension);
            std::vector<double> x(target_dimension, double(0));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("post_pred_y", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> post_pred_y(N);
            stan::math::initialize(post_pred_y, DUMMY_VAR__);
            stan::math::fill(post_pred_y, DUMMY_VAR__);
            stan::math::assign(post_pred_y,add(mu, multiply(sigma, latent_std_normal)));
            // do transformed parameters statements
            current_statement_begin__ = 60;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 62;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "mu") + (get_base1(r_1_1, get_base1(J_1, n, "J_1", 1), "r_1_1", 1) * get_base1(Z_1_1, n, "Z_1_1", 1))), 
                            "assigning variable mu");
            }
            current_statement_begin__ = 65;
            for (int ii = 1; ii <= N; ++ii) {
                current_statement_begin__ = 66;
                stan::model::assign(phi_area_poverty_gap, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(J_1, ii, "J_1", 1)), stan::model::nil_index_list()), 
                            (stan::model::rvalue(phi_area_poverty_gap, stan::model::cons_list(stan::model::index_uni(get_base1(J_1, ii, "J_1", 1)), stan::model::nil_index_list()), "phi_area_poverty_gap") + (((log1p_poverty_threshold - get_base1(post_pred_y, ii, "post_pred_y", 1)) / log1p_poverty_threshold) * logical_lt(get_base1(post_pred_y, ii, "post_pred_y", 1), log1p_poverty_threshold))), 
                            "assigning variable phi_area_poverty_gap");
            }
            current_statement_begin__ = 71;
            stan::math::assign(phi_area_poverty_gap, elt_divide(phi_area_poverty_gap, obs_per_group));
            current_statement_begin__ = 72;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (sum(elt_multiply(phi_area_poverty_gap, obs_per_group)) / N), 
                        "assigning variable x");
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                size_t r_1_1_j_1_max__ = N_1;
                for (size_t j_1__ = 0; j_1__ < r_1_1_j_1_max__; ++j_1__) {
                    vars__.push_back(r_1_1(j_1__));
                }
                vars__.push_back(b_Intercept);
                size_t phi_area_poverty_gap_j_1_max__ = N_1;
                for (size_t j_1__ = 0; j_1__ < phi_area_poverty_gap_j_1_max__; ++j_1__) {
                    vars__.push_back(phi_area_poverty_gap(j_1__));
                }
                size_t x_k_0_max__ = target_dimension;
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    vars__.push_back(x[k_0__]);
                }
                size_t post_pred_y_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < post_pred_y_j_1_max__; ++j_1__) {
                    vars__.push_back(post_pred_y(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 97;
            validate_non_negative_index("predictive_y", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> predictive_y(N);
            stan::math::initialize(predictive_y, DUMMY_VAR__);
            stan::math::fill(predictive_y, DUMMY_VAR__);
            stan::math::assign(predictive_y,to_vector(stan::math::exp(normal_rng(add(b_Intercept, multiply(Xc, b)), sigma, base_rng__))));
            // validate, write generated quantities
            current_statement_begin__ = 97;
            size_t predictive_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < predictive_y_j_1_max__; ++j_1__) {
                vars__.push_back(predictive_y(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_povertygap";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t sd_1_j_1_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < sd_1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_1_j_1_max__ = N_1;
        size_t z_1_k_0_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t latent_std_normal_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < latent_std_normal_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "latent_std_normal" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_1_1_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < r_1_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_1_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_Intercept";
            param_names__.push_back(param_name_stream__.str());
            size_t phi_area_poverty_gap_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < phi_area_poverty_gap_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi_area_poverty_gap" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_k_0_max__ = target_dimension;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t post_pred_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < post_pred_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "post_pred_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t predictive_y_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < predictive_y_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predictive_y" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t sd_1_j_1_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < sd_1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_1_j_1_max__ = N_1;
        size_t z_1_k_0_max__ = M_1;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < z_1_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t latent_std_normal_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < latent_std_normal_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "latent_std_normal" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r_1_1_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < r_1_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r_1_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_Intercept";
            param_names__.push_back(param_name_stream__.str());
            size_t phi_area_poverty_gap_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < phi_area_poverty_gap_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi_area_poverty_gap" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_k_0_max__ = target_dimension;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t post_pred_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < post_pred_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "post_pred_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t predictive_y_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < predictive_y_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predictive_y" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_povertygap_namespace::model_povertygap stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
